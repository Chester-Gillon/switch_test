== Introduction ==

With commit cb351730 01/11/2021 22:20 which first added code which could run the test continuously, under Linux which 
could transmit frames at near 1 Gb line rate on some test iterations missed frames were reported as well as a non-zero ps_drop.
Where ps_drop means packets were dropped by the Kernel as they were not being read quickly enough.

Of the two Linux PC, a Lenovo ideapad 510S with Intel(R) Core(TM) i5-7200U CPU running Ubuntu 18.04 with a 4.15.0-161-generic 
Kernel suffered a higher rate of ps_drop so investigated on that.

== Initial results ==

In the first test iteration, the number of missed frames and value of ps_drop were both 32.

12:59:06.713
      Tx Test        Tx Copy        Rx Test  Rx Unexpected     Rx Flooded       Rx Other  missed frames   tx rate (Hz)
       811899              0         811749              0             17              0             32        81189.8

Summary of missed frames : '.' none missed 'S' some missed 'A' all missed
Source  Destination ports --->
  port           111111111122222
        123456789012345678901234
     1   .......S...............
     2  . .......S...S..........
     3  .. .....................
     4  ... ....................
     5  .... ............S......
     6  ..... ............S.....
     7  ...... ............S....
     8  ....... ............S...
     9  ........ ............S..
    10  ......... ............S.
    11  .......... ............S
    12  ........... ........S...
    13  S........... ........S..
    14  .S........... ........S.
    15  ..S........... ........S
    16  ...S........... ........
    17  S...S........... .......
    18  .S...S........... ......
    19  ..S...S........... .....
    20  ...S...S........... ....
    21  ....S...S........... ...
    22  .....S...S........... ..
    23  ......S...S........... .
    24  ....................... 
PCAP statistics : ps_recv=811813 ps_drop=32 ps_ifdrop=811810
Total test intervals with failures = 1 : last failure NOW

The value of ps_drop is cumulative, and the delta between ps_drop matches the number of missed frames on further failures.
This points at the software not giving preference to reading the received frames.


== Decreasing max_snaplen to the minimum required for the test prevented ps_drop ==

In the initial code the max_snaplen configured in PCAP was set to 64KiB which was the value in example code.
By reducing to the mininum required for the test with the following, ps_drop is no longer incrementing:

$ git diff |cat
warning: CRLF will be replaced by LF in switch_test_main.c.
The file will have its original line endings in your working directory.
diff --git a/switch_test_main.c b/switch_test_main.c
index ec74526..cec3661 100644
--- a/switch_test_main.c
+++ b/switch_test_main.c
@@ -611,8 +611,13 @@ static pcap_t *open_interface (const char *const interface_name)
         exit (EXIT_FAILURE);
     }
     
-    /* Capture the entire length of the test packets */
-    const int max_snaplen = 65536;
+    /* Capture the minimum length of the test packets, of which the last field checked is Address which contains the 
+     * sequence number. Uses the offset for the first non-bit field after Address.
+     *
+     * While the transmitted frames contain a test pattern in the data[] this program doesn't verify the test pattern,
+     * on the assumption that any corruption at the link-level will invalidate the CRC and the switches and/or network
+     * adapter will drop the frames with an invalid CRC which the test will then reported as "missed". */
+    const int max_snaplen = offsetof (ethercat_frame_t, IRQ);
     rc = pcap_set_snaplen (pcap_handle, max_snaplen);
     if (rc != 0)
     {

Reasons why this change can help are:
a. Not all of the received frame data has to be passed from the Kernel to the application.
b. Depending upon the capture mechanism supported by the Kernel, for a given ring buffer size a smaller snaplen may allow more
   frames to be stored. From looking at the NPCAP source appears some Linux Kernel capture mechanisms don't allow for the ring
   buffer to handle variable size frames; with each ring buffer entry having to be sized for the maximum snaplen.

   The actual capture mechanism used hasn't been checked.


== Large number of missed frames on initial iteration with a ConnectX-4 Lx at 10G ==

When testing with a ConnectX-4 Lx with a 10G link was checking the maximum achieved frame rate under
AlmaLinux 8.6 with just two 10G switch ports linked with a SFP cable.

When compiled for release, on the first iteration there are ~3000 to ~4000 missed frames. E.g.:
$ ./switch_test -i enp1s0f0 -p 25,26 -r -1
Writing per-port counts to 20220612T110559_per_port_counts_linux.csv
Using interface enp1s0f0 (No description available)
Test interval = 10 (secs)
Frame debug enabled = No
Frame transmit max rate = None
Press Ctrl-C to stop test at end of next test interval

11:06:09.860
      Tx Test        Tx Copy        Rx Test  Rx Unexpected     Rx Flooded       Rx Other  missed frames   tx rate (Hz)
      3287085              0        3283246              0              0              7           3708       328708.5

Summary of missed frames : '.' none missed 'S' some missed 'A' all missed
Source  Destination ports --->
  port  22
        56
    25   S
    26  S 
PCAP statistics : ps_recv=3283384 ps_drop=0 ps_ifdrop=3283622
otal test intervals with failures = 1 : last failure NOW

11:06:19.860
      Tx Test        Tx Copy        Rx Test  Rx Unexpected     Rx Flooded       Rx Other  missed frames   tx rate (Hz)
      3265402              0        3265525              0              0              5              0       326540.2

Summary of missed frames : '.' none missed 'S' some missed 'A' all missed
Source  Destination ports --->
  port  22
        56
    25   .
    26  . 
Total test intervals with failures = 1 : last failure 11:06:09.860
^C
11:06:29.860
      Tx Test        Tx Copy        Rx Test  Rx Unexpected     Rx Flooded       Rx Other  missed frames   tx rate (Hz)
      3290675              0        3290667              0              0              7              0       329067.5

Summary of missed frames : '.' none missed 'S' some missed 'A' all missed
Source  Destination ports --->
  port  22
        56
    25   .
    26  . 
Total test intervals with failures = 1 : last failure 11:06:09.860
Max pending rx frames = 1656 out of 1656


Attempted the following change t move the start time until after memory allocation and use mlockall.
However, this didn't resolve the issue with missing frames on the first test iteration when *not*
saving debug information. When save debug information, and therefore only a single iteration,
then with a small number of tests the change did seem to allow the single iteration to not have missed
frames, but might only be due to the achieved frame rate beeing lower when saving the frame content
for the debug information.

$ git diff switch_test_main.c
diff --git a/switch_test_main.c b/switch_test_main.c
index e724fdc..c412fb5 100644
--- a/switch_test_main.c
+++ b/switch_test_main.c
@@ -15,6 +15,7 @@
 
 #ifndef _WIN32
 #include <arpa/inet.h>
+#include <sys/mman.h>
 #endif
 
 #include <sys/time.h>
@@ -1072,17 +1073,6 @@ static void transmit_receive_initialise (frame_tx_rx_thread_context_t *const con
         context->frame_recording.frame_records = NULL;
     }
     context->frame_recording.num_frame_records = 0;
-    
-    const int64_t now = get_monotonic_time ();
-    context->statistics.interval_start_time = now;
-    context->test_interval_end_time = now + (arg_test_interval_secs * NSECS_PER_SEC);
-    
-    context->tx_rate_limited = arg_max_frame_rate_hz > 0;
-    if (context->tx_rate_limited)
-    {
-        context->tx_interval = NSECS_PER_SEC / arg_max_frame_rate_hz;
-        context->tx_time_of_next_frame = now;
-    }
 
     /* Calculate the number of pending rx frames which can be stored per tested source / destination port combination.
      * This aims for a nomimal total number of pending rx frames divided among the the number of combinations tested. */
@@ -1120,6 +1110,18 @@ static void transmit_receive_initialise (frame_tx_rx_thread_context_t *const con
             }
         }
     }
+
+    /* Start the timers for statistics collection and frame transmission */
+    const int64_t now = get_monotonic_time ();
+    context->statistics.interval_start_time = now;
+    context->test_interval_end_time = now + (arg_test_interval_secs * NSECS_PER_SEC);
+
+    context->tx_rate_limited = arg_max_frame_rate_hz > 0;
+    if (context->tx_rate_limited)
+    {
+        context->tx_interval = NSECS_PER_SEC / arg_max_frame_rate_hz;
+        context->tx_time_of_next_frame = now;
+    }
 }
 
 
@@ -1789,6 +1791,12 @@ int main (int argc, char *argv[])
         console_printf ("Automatically limiting maximum frame rate due to testing less than %" PRIi64 " ports\n",
                 injection_port_to_switch_port_under_test_speed_ratio);
     }
+
+#ifndef _WIN32
+    /* Try and avoid page faults while running */
+    rc = mlockall (MCL_CURRENT | MCL_FUTURE);
+    console_printf ("mlockall = %s\n", (rc == 0) ? "Success" : "Failed");
+#endif
     
     /* Report the command line arguments used */
     console_printf ("Writing per-port counts to %s\n", results_summary.per_port_counts_csv_filename);

Total test intervals with failures = 1 : last failure NOW

11:06:19.860
      Tx Test        Tx Copy        Rx Test  Rx Unexpected     Rx Flooded       Rx Other  missed frames   tx rate (Hz)
      3265402              0        3265525              0              0              5              0       326540.2

Summary of missed frames : '.' none missed 'S' some missed 'A' all missed
Source  Destination ports --->
  port  22
        56
    25   .
    26  . 
Total test intervals with failures = 1 : last failure 11:06:09.860
^C
11:06:29.860
      Tx Test        Tx Copy        Rx Test  Rx Unexpected     Rx Flooded       Rx Other  missed frames   tx rate (Hz)
      3290675              0        3290667              0              0              7              0       329067.5

Summary of missed frames : '.' none missed 'S' some missed 'A' all missed
Source  Destination ports --->
  port  22
        56
    25   .
    26  . 
Total test intervals with failures = 1 : last failure 11:06:09.860
Max pending rx frames = 1656 out of 1656
